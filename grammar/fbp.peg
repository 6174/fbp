/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

{
  var parser, edges, nodes; 

  parser = this;

  edges = parser.edges = [];
  
  parser.exports = []

  nodes = {};

  parser.addNode = function (nodeName, componentName) {
    nodes[nodeName] = {component: componentName};
  }

  parser.getResult = function () {
    return {processes:nodes, connections:parser.processEdges(), exports:parser.exports};
  }  

  var flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }
  
  parser.registerExports = function (priv, pub) {
    parser.exports.push({private:priv.toLowerCase(), public:pub.toLowerCase()})
  }

  parser.registerEdges = function (edges) {

    edges.forEach(function (o, i) {
      parser.edges.push(o);
    });
  }  

  parser.processEdges = function () {   
    var flats, grouped;
    flats = flatten(parser.edges);
    grouped = [];
    var current = {};
    flats.forEach(function (o, i) {
      if (i % 2 !== 0) { 
        var pair = grouped[grouped.length - 1];
        pair.tgt = o.tgt;
        return;
      }
      grouped.push(o);
    });
    return grouped;
  }
}

start
  = (line)*  { return parser.getResult();  }

line
  = _ "EXPORT=" priv:[A-Z.]+ ":" pub:[A-Z]+ _ LineTerminator? {return parser.registerExports(priv.join(""),pub.join(""))}
  / comment [\n\r\u2028\u2029]?
  / _ edges:connection _ LineTerminator? {return parser.registerEdges(edges);}
  

LineTerminator
  = _ ","? comment? [\n\r\u2028\u2029]?

comment
  = "#" (anychar)*

connection 
  = x:bridge _ "->" _ y:connection { return [x,y]; }
  / bridge

bridge
  = x:port _ proc:node _ y:port     { return [{"tgt":{process:proc, port:x}},{"src":{process:proc, port:y}}]; }
  / iip
  / rightlet
  / leftlet

leftlet
  = proc:node _ port:port  { return {"src":{process:proc, port:port}} }  

iip
  = "'" iip:(anychar)* "'"        { return {"data":iip.join("")} }

rightlet 
  = port:port _ proc:node  { return {"tgt":{process:proc, port:port}} } 

node
  = node:[a-zA-Z]+ comp:component? { if(comp){parser.addNode(node.join(""),comp);}; return node.join("")}

component
  = "(" comp:([a-zA-Z/]+)? ")" { return comp ? comp.join("") : '' }

port
  = portname:[A-Z.0-9]+ __ {return portname.join("").toLowerCase()}

anychar
  = [a-zA-Z0-9 .:@+=()_\-$*/\\]
_
  = (" "*)?

__
  = " "+